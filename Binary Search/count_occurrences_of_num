
// Function to find the first occurrence of 'x' in a sorted array 'a'
int firstOccurrence(vector<int> &a, int n, int x)
{
    int low = 0, high = n - 1;
    int first = -1;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (a[mid] == x)
        {
            // Found a potential answer; update 'first' and look for smaller index on the left
            first = mid;
            high = mid - 1;
        }
        else if (a[mid] > x)
        {
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return first;
}

// Function to find the last occurrence of 'x' in a sorted array 'a'
int lastOccurrence(vector<int> &a, int n, int x)
{
    int low = 0, high = n - 1;
    int last = -1;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (a[mid] == x)
        {
            // Found a potential answer; update 'last' and look for a larger index on the right
            last = mid;
            low = mid + 1;
        }
        else if (a[mid] > x)
        {
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return last;
}

// Function to find both the first and last occurrences of 'x' in a sorted array 'a'
pair<int, int> firstAndLast(vector<int> &a, int n, int x)
{
    int first = firstOccurrence(a, n, x);
    if (first == -1)
        return {-1, -1};
    int last = lastOccurrence(a, n, x);
    return {first, last};
}

// Function to count the occurrences of 'x' in a sorted array 'arr'
int count(vector<int> &arr, int n, int x)
{
    // Find both the first and last occurrences of 'x'
    pair<int, int> ans = firstAndLast(arr, n, x);

    // If 'x' is not found, return 0
    if (ans.first == -1)
        return 0;

    // Calculate the count of 'x' by subtracting the first index from the last index and adding 1
    return (ans.second - ans.first + 1);
}
